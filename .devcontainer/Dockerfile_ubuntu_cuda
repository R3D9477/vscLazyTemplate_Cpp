FROM nvidia/cuda:12.4.1-base-ubuntu22.04

ENV TZ=US DEBIAN_FRONTEND=noninteractive

USER root
RUN passwd --delete root

RUN apt update -y
RUN apt install -y lsb-release ninja-build wget make build-essential software-properties-common gnupg git sudo nano valgrind pkg-config

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
# INSTALL CLANG

#RUN wget --no-verbose --show-progress --progress=bar:force:noscroll -O "/tmp/llvm.sh" "https://apt.llvm.org/llvm.sh"
#RUN chmod +x /tmp/llvm.sh
#RUN /tmp/llvm.sh 19 all
#RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 100
#RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 100
#RUN update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-19 100
#RUN update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-19 100

RUN apt install -y clang-format clang-tidy

# -------------------------------------------------------------------------------------------
# INSTALL LIBS

# for vcpkg
RUN apt install -y curl zip unzip tar libtool autoconf automake autoconf-archive bison flex nasm

# for cmake & conan
RUN apt install -y python3 python3-venv

# -------------------------------------------------------------------------------------------
# INSTALL CUDA

# CUDA 12.4
#RUN wget --no-verbose --show-progress --progress=bar:force:noscroll -O "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb"
#RUN dpkg -i cuda-keyring_1.1-1_all.deb
#RUN rm cuda-keyring_1.1-1_all.deb
#RUN apt-get update
#RUN apt-get -y install cuda-toolkit-12-4

# WORKAROUND FOR PASCAL
# install nvcc 11.5
RUN apt install -y nvidia-cuda-toolkit 
# install gcc-10 for CUDA 11.5 (https://github.com/NVlabs/instant-ngp/issues/119#issuecomment-1034701258)
RUN apt install -y gcc-10 g++-10
RUN mv "/usr/lib/nvidia-cuda-toolkit/bin/g++" "/usr/lib/nvidia-cuda-toolkit/bin/g++-cuda-11.5"
RUN mv "/usr/lib/nvidia-cuda-toolkit/bin/gcc" "/usr/lib/nvidia-cuda-toolkit/bin/gcc-cuda-11.5"
RUN ln -s "/usr/bin/g++-10" "/usr/lib/nvidia-cuda-toolkit/bin/g++"
RUN ln -s "/usr/bin/gcc-10" "/usr/lib/nvidia-cuda-toolkit/bin/gcc"
# install ncu
RUN wget --no-verbose --show-progress --progress=bar:force:noscroll -O "/tmp/nsight-compute-2019_5-Linux-installer.run" "https://developer.nvidia.com/rdp/assets/nsight-compute-2019_5-Linux-installer"
RUN chmod +x "/tmp/nsight-compute-2019_5-Linux-installer.run"
RUN mkdir -p "/opt/nsight-compute-2019_5"
RUN "/tmp/nsight-compute-2019_5-Linux-installer.run" --noexec --target "/opt/nsight-compute-2019_5"
RUN rm "/tmp/nsight-compute-2019_5-Linux-installer.run"

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
# CONFIGURE

# CREATE USER

RUN groupadd build
RUN useradd -rm -d /home/build -s /bin/bash -g root -G sudo -u 1001 build
RUN echo "export USER=build" > "/etc/profile.d/set_user.sh"
RUN passwd --delete build

RUN usermod -a -G sudo build
RUN usermod -a -G build build

RUN mkdir -p "/home/build/cppproject"
RUN chown build:build "/home/build/cppproject"
RUN chown build:build -R "/home/build"

USER build:build
WORKDIR "/home/build"

# INSTALL BUILD SYSTEM

RUN python3 -m venv "/home/build/.local" --system-site-packages
ENV PATH="${PATH}:/home/build/.local/bin"

RUN /home/build/.local/bin/pip install gprof2dot matplotlib pillow

# CMake
RUN /home/build/.local/bin/pip install cmake

# Conan2
RUN mkdir -p "/home/build/.conan2"
RUN ln -s "/home/build/.conan2" "/home/build/conan2"

RUN /home/build/.local/bin/pip install conan
RUN /home/build/.local/bin/conan remote update conancenter --url="https://center2.conan.io"

# VCPKG
RUN mkdir -p "/home/build/.vcpkg"
RUN ln -s "/home/build/.vcpkg" "/home/build/vcpkg"

RUN echo 'if ! [ -d "/home/build/vcpkg/vcpkg" ]; then'                                       > "/home/build/.post_start_install_vcpkg.sh"
RUN echo '  git clone "https://github.com/microsoft/vcpkg.git" "/home/build/.vcpkg/vcpkg"'  >> "/home/build/.post_start_install_vcpkg.sh"
RUN echo '  "/home/build/.vcpkg/vcpkg/bootstrap-vcpkg.sh"'                                  >> "/home/build/.post_start_install_vcpkg.sh"
RUN echo 'fi'                                                                               >> "/home/build/.post_start_install_vcpkg.sh"

RUN echo 'export VCPKG_ROOT="/home/build/.vcpkg/vcpkg"'                 >> "/home/build/.profile"
RUN echo 'export PATH="${PATH}:/home/build/.local/bin:${VCPKG_ROOT}"'   >> "/home/build/.profile"

# -------------------------------------------------------------------------------------------
# POST START SCRIPT

RUN echo '#!/bin/bash'                                               > "/home/build/.post_start.sh"
RUN echo 'set -e'                                                   >> "/home/build/.post_start.sh"
RUN echo 'touch /home/build/.post_start.lock'                       >> "/home/build/.post_start.sh"
RUN echo 'echo "> post_start started at `date`"'                    >> "/home/build/.post_start.sh"

RUN echo 'sudo chown -R build:build /home/build'                    >> "/home/build/.post_start.sh"
RUN echo '/home/build/.local/bin/conan profile detect --exist-ok'   >> "/home/build/.post_start.sh"
RUN echo 'source /home/build/.post_start_install_vcpkg.sh'          >> "/home/build/.post_start.sh"

RUN echo 'echo "> post_start ended at `date`"'                      >> "/home/build/.post_start.sh"
RUN echo 'rm -f /home/build/.post_start.lock'                       >> "/home/build/.post_start.sh"
RUN chmod +x "/home/build/.post_start.sh"
