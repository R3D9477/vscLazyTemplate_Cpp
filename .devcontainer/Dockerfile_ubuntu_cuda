FROM nvidia/cuda:12.4.1-base-ubuntu22.04

USER root

RUN passwd --delete root

# INSTALL CLANG

RUN apt update -y
RUN apt install lsb-release ninja-build wget make build-essential software-properties-common gnupg git sudo nano valgrind pkg-config -y

RUN wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh
RUN chmod +x /tmp/llvm.sh
RUN /tmp/llvm.sh 19 all
RUN update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 100
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 100
RUN update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-19 100
RUN update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-19 100

# INSTALL ADDITIONAL PKGS

# for CUDA (Ubuntu 22.04)
RUN echo "deb https://developer.download.nvidia.com/devtools/repos/ubuntu2204/$(dpkg --print-architecture) /" | tee /etc/apt/sources.list.d/nvidia-devtools.list
RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
RUN apt update
RUN apt install nsight-compute -y
RUN ln -s /opt/nvidia/nsight-compute/*/ncu /usr/bin/ncu

RUN apt install nvidia-cuda-toolkit -y

# for vcpkg
RUN apt install curl zip unzip tar libtool autoconf automake autoconf-archive bison flex nasm -y

# -------------------------------------------------------------------------------------------
# INSTALL CPPTOOLS

RUN apt install python3 python3-venv -y

# CREATE USER

RUN groupadd build
RUN useradd -rm -d /home/build -s /bin/bash -g root -G sudo -u 1001 build
RUN echo "export USER=build" > /etc/profile.d/set_user.sh
RUN passwd --delete build

RUN usermod -a -G sudo build
RUN usermod -a -G build build

RUN mkdir -p "/home/build/cppproject"
RUN chown build:build "/home/build/cppproject"

RUN mkdir -p "/home/build/.conan2"
RUN chown build:build "/home/build/.conan2"
RUN ln -s "/home/build/.conan2" "/home/build/conan2"

RUN mkdir -p "/home/build/.vcpkg"
RUN chown build:build "/home/build/.vcpkg"
RUN ln -s "/home/build/.vcpkg" "/home/build/vcpkg"

USER build:build
WORKDIR /home/build

# INSTALL BUILD SYSTEM

RUN python3 -m venv /home/build/.local --system-site-packages
ENV PATH="${PATH}:/home/build/.local/bin"

RUN /home/build/.local/bin/pip install cmake

RUN /home/build/.local/bin/pip install conan
RUN /home/build/.local/bin/conan remote update conancenter --url="https://center2.conan.io"

RUN /home/build/.local/bin/pip install gprof2dot matplotlib pillow

ENV VCPKG_VERSION="2024.11.16"
RUN echo '#!/bin/bash' > "/home/build/.install_vcpkg.sh"
RUN echo 'if [ -d "/home/build/vcpkg/vcpkg" ]; then exit 0; fi' >> "/home/build/.install_vcpkg.sh"
RUN echo 'wget "https://github.com/microsoft/vcpkg/archive/refs/tags/${VCPKG_VERSION}.zip" -O "/tmp/vcpkg-${VCPKG_VERSION}.zip"' >> "/home/build/.install_vcpkg.sh"
RUN echo 'unzip "/tmp/vcpkg-${VCPKG_VERSION}.zip" -d "/home/build/.vcpkg"' >> "/home/build/.install_vcpkg.sh"
RUN echo 'mv "/home/build/.vcpkg/vcpkg-${VCPKG_VERSION}" "/home/build/.vcpkg/vcpkg"' >> "/home/build/.install_vcpkg.sh"
RUN echo '"/home/build/.vcpkg/vcpkg/bootstrap-vcpkg.sh"' >> "/home/build/.install_vcpkg.sh"
RUN chmod +x "/home/build/.install_vcpkg.sh"

RUN echo 'export VCPKG_ROOT="/home/build/.vcpkg/vcpkg"' >> "/home/build/.bashrc"
RUN echo 'export PATH="${PATH}:/home/build/.local/bin:${VCPKG_ROOT}"' >> "/home/build/.bashrc"
